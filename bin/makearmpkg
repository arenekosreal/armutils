#!/usr/bin/bash

# SPDX-FileCopyrightText: 2020 Michael Picht <mipi@fsfe.org>
#
# SPDX-License-Identifier: GPL-3.0-or-later

# makearmpkg is a fork of makechrootpkg that is adjusted to build packages for
# ARM architectures in an ARM chroot environment. The chroot environment must
# be created with mkarmroot.

# Preamble of the original file:
#
# License: GNU GPLv2
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

#!/hint/bash
# This may be included with or without `set -euE`

# License: Unspecified

[[ -z ${_INCLUDE_COMMON_SH:-} ]] || return 0
_INCLUDE_COMMON_SH="$(set +o|grep nounset)"

set +u +o posix
# shellcheck disable=1091
. /usr/share/makepkg/util.sh
$_INCLUDE_COMMON_SH

# Avoid any encoding problems
export LANG=C

shopt -s extglob

# check if messages are to be printed using color
if [[ -t 2 && "$TERM" != dumb ]]; then
	colorize
else
	# shellcheck disable=2034
	declare -gr ALL_OFF='' BOLD='' BLUE='' GREEN='' RED='' YELLOW=''
fi

stat_busy() {
	local mesg=$1; shift
	# shellcheck disable=2059
	printf "${GREEN}==>${ALL_OFF}${BOLD} ${mesg}...${ALL_OFF}" "$@" >&2
}

stat_done() {
	# shellcheck disable=2059
	printf "${BOLD}done${ALL_OFF}\n" >&2
}

_setup_workdir=false
setup_workdir() {
	[[ -z ${WORKDIR:-} ]] && WORKDIR=$(mktemp -d --tmpdir "${0##*/}.XXXXXXXXXX")
	_setup_workdir=true
	trap 'trap_abort' INT QUIT TERM HUP
	trap 'trap_exit' EXIT
}

cleanup() {
	if [[ -n ${WORKDIR:-} ]] && $_setup_workdir; then
		rm -rf "$WORKDIR"
	fi
	exit "${1:-0}"
}

abort() {
	error 'Aborting...'
	cleanup 255
}

trap_abort() {
	trap - EXIT INT QUIT TERM HUP
	abort
}

trap_exit() {
	local r=$?
	trap - EXIT INT QUIT TERM HUP
	cleanup $r
}

die() {
	(( $# )) && error "$@"
	cleanup 255
}

##
#  usage : lock( $fd, $file, $message, [ $message_arguments... ] )
##
lock() {
	# Only reopen the FD if it wasn't handed to us
	if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
		mkdir -p -- "$(dirname -- "$2")"
		eval "exec $1>"'"$2"'
	fi

	if ! flock -n "$1"; then
		stat_busy "${@:3}"
		flock "$1"
		stat_done
	fi
}

##
#  usage : slock( $fd, $file, $message, [ $message_arguments... ] )
##
slock() {
	# Only reopen the FD if it wasn't handed to us
	if ! [[ "/dev/fd/$1" -ef "$2" ]]; then
		mkdir -p -- "$(dirname -- "$2")"
		eval "exec $1>"'"$2"'
	fi

	if ! flock -sn "$1"; then
		stat_busy "${@:3}"
		flock -s "$1"
		stat_done
	fi
}

##
#  usage : lock_close( $fd )
##
lock_close() {
	local fd=$1
	# https://github.com/koalaman/shellcheck/issues/862
	# shellcheck disable=2034
	exec {fd}>&-
}

##
# usage: pkgver_equal( $pkgver1, $pkgver2 )
##
pkgver_equal() {
	if [[ $1 = *-* && $2 = *-* ]]; then
		# if both versions have a pkgrel, then they must be an exact match
		[[ $1 = "$2" ]]
	else
		# otherwise, trim any pkgrel and compare the bare version.
		[[ ${1%%-*} = "${2%%-*}" ]]
	fi
}

#!/hint/bash
# License: Unspecified
:

# shellcheck disable=2034
CHROOT_VERSION='v1'

##
#  usage : check_root $keepenv
##
orig_argv=("${BASH_SOURCE[0]}" "$@")
check_root() {
	local keepenv=$1

	(( EUID == 0 )) && return
	if type -P sudo >/dev/null; then
		exec sudo --preserve-env="$keepenv" -- "${orig_argv[@]}"
	else
		exec su root -c "$(printf ' %q' "${orig_argv[@]}")"
	fi
}

##
#  usage : is_btrfs( $path )
# return : whether $path is on a btrfs
##
is_btrfs() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs ]]
}

##
#  usage : is_subvolume( $path )
# return : whether $path is a the root of a btrfs subvolume (including
#          the top-level subvolume).
##
is_subvolume() {
	[[ -e "$1" && "$(stat -f -c %T "$1")" == btrfs && "$(stat -c %i "$1")" == 256 ]]
}

##
#  usage : subvolume_delete_recursive( $path )
#
#    Find all btrfs subvolumes under and including $path and delete them.
##
subvolume_delete_recursive() {
	local subvol

	is_subvolume "$1" || return 0

	while IFS= read -d $'\0' -r subvol; do
		if ! subvolume_delete_recursive "$subvol"; then
			return 1
		fi
	done < <(find "$1" -mindepth 1 -xdev -depth -inum 256 -print0)
	if ! btrfs subvolume delete "$1" &>/dev/null; then
		error "Unable to delete subvolume %s" "$subvol"
		return 1
	fi

	return 0
}

# shellcheck disable=1091
source /usr/share/makepkg/util/config.sh

shopt -s nullglob

default_makepkg_args=(--syncdeps --noconfirm --log --holdver --skipinteg)
makepkg_args=("${default_makepkg_args[@]}")
verifysource_args=()
chrootdir=
passeddir=
makepkg_user=
declare -a install_pkgs
declare -i ret=0

keepbuilddir=0
update_first=0
clean_first=0
run_namcap=0
run_checkpkg=0
temp_chroot=0

bindmounts_ro=()
bindmounts_rw=()

copy=$USER
[[ -n ${SUDO_USER:-} ]] && copy=$SUDO_USER
[[ -z "$copy" || $copy = root ]] && copy=copy
src_owner=${SUDO_USER:-$USER}

print_help() {
    cat <<EOF
makearmpkg (make a package for an ARM architecture)

Usage:
  ${0##*/} [options] -r <chrootdir> [--] [makepkg args]

Run this script in a PKGBUILD dir to build a package for an ARM architecture
inside a chroot. Arguments passed to this script after the end-of-options
marker (--) will be passed to makepkg.

The chroot dir consists of the following directories: <chrootdir>/{root, copy}
but only "root" is required by default. The working copy will be created as
needed.

The chroot "root" directory must be created via the following
command:
  mkarmroot <chrootdir>/root base-devel

This script reads {SRC,SRCPKG,PKG,LOG}DEST, MAKEFLAGS and PACKAGER
from makepkg.conf(5), if those variables are not part of the
environment.

Default makepkg args: ${default_makepkg_args[*]}

Options:
  -h         This help
  -c         Clean the chroot before building
  -d <dir>   Bind directory into build chroot as read-write
  -D <dir>   Bind directory into build chroot as read-only
  -u         Update the working copy of the chroot before building. This is
             useful for rebuilds without dirtying the pristine chroot
  -r <dir>   The chroot dir to use
  -I <pkg>   Install a package into the working copy of the chroot
  -l <copy>  The directory to use as the working copy of the chroot. Useful
             for maintaining multiple copies. Default: $copy
  -n         Run namcap on the package
  -C         Run checkpkg on the package
  -T         Build in a temporary directory
  -U         Run makepkg as a specified user
EOF
}

# {{{ functions
# Usage: sync_chroot $chrootdir $copydir [$copy]
sync_chroot() {
	local chrootdir=$1
	local copydir=$2
	local copy=${3:-$2}

	if [[ "$chrootdir/root" -ef "$copydir" ]]; then
		error 'Cannot sync copy with itself: %s' "$copydir"
		return 1
	fi

	# Get a read lock on the root chroot to make
	# sure we don't clone a half-updated chroot
	slock 8 "$chrootdir/root.lock" \
		"Locking clean chroot [%s]" "$chrootdir/root"

	stat_busy "Synchronizing chroot copy [%s] -> [%s]" "$chrootdir/root" "$copy"
	if is_btrfs "$chrootdir" && ! mountpoint -q "$copydir"; then
		subvolume_delete_recursive "$copydir" ||
			die "Unable to delete subvolume %s" "$copydir"
		btrfs subvolume snapshot "$chrootdir/root" "$copydir" >/dev/null ||
			die "Unable to create subvolume %s" "$copydir"
	else
		mkdir -p "$copydir"
		rsync -a --delete -q -W -x "$chrootdir/root/" "$copydir"
	fi
	stat_done

	# Drop the read lock again
	lock_close 8

	# Update mtime
	touch "$copydir"
}

# Usage: delete_chroot $copydir [$copy]
delete_chroot() {
	local copydir=$1
	local copy=${1:-$2}

	stat_busy "Removing chroot copy [%s]" "$copy"
	if is_subvolume "$copydir" && ! mountpoint -q "$copydir"; then
		subvolume_delete_recursive "$copydir" ||
			die "Unable to delete subvolume %s" "$copydir"
	else
		# avoid change of filesystem in case of an umount failure
		rm --recursive --force --one-file-system "$copydir" ||
			die "Unable to delete %s" "$copydir"
	fi

	# remove lock file
	rm -f "$copydir.lock"
	stat_done
}

install_packages() {
	local -a pkgnames
	local ret

	pkgnames=("${install_pkgs[@]##*/}")

	cp -- "${install_pkgs[@]}" "$copydir/root/"
	arm-nspawn "$copydir" "${bindmounts_ro[@]}" "${bindmounts_rw[@]}" \
        bash -c 'yes y | pacman -U -- "$@"' -bash "${pkgnames[@]/#//root/}"
	ret=$?
	rm -- "${pkgnames[@]/#/$copydir/root/}"

	return $ret
}

prepare_chroot() {
    if [ -e "$copydir/usr/bin/sudo" ]
    then
        chmod u+s "$copydir/usr/bin/sudo"
    fi    

	(( keepbuilddir )) || rm -rf "$copydir/build"

	local builduser_uid builduser_gid
	builduser_uid="$(id -u "$makepkg_user")"
	builduser_gid="$(id -g "$makepkg_user")"
	local install="install -o $builduser_uid -g $builduser_gid"
	local x
	local builduser_name

    builduser_name=$(grep ".*:.*:${builduser_uid}:.*" "$copydir/etc/passwd" | cut -d : -f 1)
    if [ "$builduser_name" = "" ]
    then
        builduser_name="builduser"

    	# We can't use useradd without chrooting, otherwise it invokes PAM modules
	    # which we might not be able to load (i.e. when building i686 packages on
    	# an x86_64 host).
	    sed -e '/^builduser:/d' -i "$copydir"/etc/{passwd,shadow,group}
    	printf >>"$copydir/etc/group"  'builduser:x:%d:\n' "$builduser_gid"
	    printf >>"$copydir/etc/passwd" 'builduser:x:%d:%d:builduser:/build:/bin/bash\n' "$builduser_uid" "$builduser_gid"
    	printf >>"$copydir/etc/shadow" 'builduser:!!:%d::::::\n' "$(( $(date -u +%s) / 86400 ))"
    fi

    if [ -e "$copydir/home/$builduser_name" ]
    then
    	chmod ugo+wrx "$copydir/home/$builduser_name"
    fi	

	$install -d "$copydir"/{build,startdir,{pkg,srcpkg,src,log}dest}

	sed -e '/^MAKEFLAGS=/d' -e '/^PACKAGER=/d' -i "$copydir/etc/makepkg.conf"
	for x in BUILDDIR=/build PKGDEST=/pkgdest SRCPKGDEST=/srcpkgdest SRCDEST=/srcdest LOGDEST=/logdest \
		"MAKEFLAGS='${MAKEFLAGS:-}'" "PACKAGER='${PACKAGER:-}'"
	do
		grep -q "^$x" "$copydir/etc/makepkg.conf" && continue
		echo "$x" >>"$copydir/etc/makepkg.conf"
	done

    echo "$builduser_name ALL = NOPASSWD: ALL" > "$copydir/etc/sudoers.d/builduser"
	chmod 440 "$copydir/etc/sudoers.d/builduser"

	# This is a little gross, but this way the script is recreated every time in the
	# working copy
	{
		printf '#!/bin/bash\n'
		declare -f _chrootbuild
		declare -p SOURCE_DATE_EPOCH 2>/dev/null || true
		printf '_chrootbuild %s "$@" || exit\n' $builduser_name

		if (( run_namcap )); then
			declare -f _chrootnamcap
			printf '_chrootnamcap || exit\n'
		fi
	} >"$copydir/chrootbuild"
	chmod +x "$copydir/chrootbuild"
}

# These functions aren't run in makechrootpkg,
# so no global variables
_chrootbuild() {
	# No coredumps
	ulimit -c 0

	# shellcheck source=/dev/null
	. /etc/profile

	# Beware, there are some stupid arbitrary rules on how you can
	# use "$" in arguments to commands with "sudo -i".  ${foo} or
	# ${1} is OK, but $foo or $1 isn't.
	# https://bugzilla.sudo.ws/show_bug.cgi?id=765
	user_name=$1
	shift
	sudo --preserve-env=SOURCE_DATE_EPOCH -iu "$user_name" bash -c 'cd /startdir; makepkg_sudo "$@"' -bash "$@"
	ret=$?
	case $ret in
		0|14)
			return 0;;
		*)
			return $ret;;
	esac
}

_chrootnamcap() {
	pacman -S --needed --noconfirm namcap
	for pkgfile in /startdir/PKGBUILD /pkgdest/*; do
		echo "Checking ${pkgfile##*/}"
		sudo -u builduser namcap "$pkgfile" 2>&1 | tee "/logdest/${pkgfile##*/}-namcap.log"
	done
}

download_sources() {
	setup_workdir
	chown "$makepkg_user:" "$WORKDIR"

	# Ensure sources are downloaded
	sudo -u "$makepkg_user" --preserve-env=GNUPGHOME \
		env SRCDEST="$SRCDEST" BUILDDIR="$WORKDIR" \
		makepkg --config="$copydir/etc/makepkg.conf" --verifysource -o "${verifysource_args[@]}" ||
		die "Could not download sources."
}

move_products() {
	local pkgfile
	for pkgfile in "$copydir"/pkgdest/*; do
		chown "$src_owner" "$pkgfile"
		mv "$pkgfile" "$PKGDEST"

		# Fix broken symlink because of temporary chroot PKGDEST /pkgdest
		if [[ "$PWD" != "$PKGDEST" && -L "$PWD/${pkgfile##*/}" ]]; then
		    # shellcheck disable=2226
			ln -sf "$PKGDEST/${pkgfile##*/}"
		fi
	done

	local l
	for l in "$copydir"/logdest/*; do
		[[ $l == */logpipe.* ]] && continue
		chown "$src_owner" "$l"
		mv "$l" "$LOGDEST"
	done

	for s in "$copydir"/srcpkgdest/*; do
		chown "$src_owner" "$s"
		mv "$s" "$SRCPKGDEST"

		# Fix broken symlink because of temporary chroot SRCPKGDEST /srcpkgdest
		if [[ "$PWD" != "$SRCPKGDEST" && -L "$PWD/${s##*/}" ]]; then
		    # shellcheck disable=2226
			ln -sf "$SRCPKGDEST/${s##*/}"
		fi
	done
}
# }}}

while getopts 'hcur:I:l:nCTD:d:U:' arg; do
	case "$arg" in
		c) clean_first=1 ;;
		D) bindmounts_ro+=("--bind-ro=$OPTARG") ;;
		d) bindmounts_rw+=("--bind=$OPTARG") ;;
		u) update_first=1 ;;
		r) passeddir="$OPTARG" ;;
		I) install_pkgs+=("$OPTARG") ;;
		l) copy="$OPTARG" ;;
		n) run_namcap=1; makepkg_args+=(--install) ;;
		C) run_checkpkg=1 ;;
		T) temp_chroot=1; copy+="-$$" ;;
		U) makepkg_user="$OPTARG" ;;
		h|*)
		    print_help
            exit 0
		    ;;
	esac
done

[[ ! -f PKGBUILD && -z "${install_pkgs[*]}" ]] && die 'This must be run in a directory containing a PKGBUILD.'
[[ -n $makepkg_user && -z $(id -u "$makepkg_user") ]] && die 'Invalid makepkg user.'
makepkg_user=${makepkg_user:-${SUDO_USER:-$USER}}

check_root SOURCE_DATE_EPOCH,GNUPGHOME,SRCDEST,SRCPKGDEST,PKGDEST,LOGDEST,MAKEFLAGS,PACKAGER

# Canonicalize chrootdir, getting rid of trailing /
chrootdir=$(readlink -e "$passeddir")
[[ ! -d $chrootdir ]] && die "No chroot dir defined, or invalid path '%s'" "$passeddir"
[[ ! -d $chrootdir/root ]] && die "Missing chroot dir root directory. Try using: mkarchroot %s/root base-devel" "$chrootdir"

if [[ ${copy:0:1} = / ]]; then
	copydir=$copy
else
	copydir="$chrootdir/$copy"
fi

# Pass all arguments after -- right to makepkg
makepkg_args+=("${@:$OPTIND}")

# See if -R or -e was passed to makepkg
for arg in "${@:$OPTIND}"; do
	case ${arg%%=*} in
		--skip*|--holdver) verifysource_args+=("$arg") ;;
		--repackage|--noextract) keepbuilddir=1 ;;
		--*) ;;
		-*R*|-*e*) keepbuilddir=1 ;;
	esac
done

umask 0022

# Use PKGBUILD directory if these don't exist
[[ -d $PKGDEST ]]    || PKGDEST=$PWD
[[ -d $SRCDEST ]]    || SRCDEST=$PWD
[[ -d $SRCPKGDEST ]] || SRCPKGDEST=$PWD
[[ -d $LOGDEST ]]    || LOGDEST=$PWD

# Lock the chroot we want to use. We'll keep this lock until we exit.
lock 9 "$copydir.lock" "Locking chroot copy [%s]" "$copy"

if [[ ! -d $copydir ]] || (( clean_first )); then
	sync_chroot "$chrootdir" "$copydir" "$copy"
fi

(( update_first )) && arm-nspawn "$copydir" \
          "${bindmounts_ro[@]}" "${bindmounts_rw[@]}" \
          pacman -Syuu --noconfirm

if [[ -n ${install_pkgs[*]:-} ]]; then
	install_packages
	ret=$?
	# If there is no PKGBUILD we are done
	[[ -f PKGBUILD ]] || exit $ret
fi

if [[ "$(id -u "$makepkg_user")" == 0 ]]; then
	error "Running makepkg as root is not allowed."
	exit 1
fi

download_sources

prepare_chroot

# sanity check
if [[ ! -f "$copydir/.arm-chroot" ]]; then
	die "'%s' does not appear to be an Arch ARM chroot." "$copydir"
elif [[ $(cat "$copydir/.arm-chroot") != "$CHROOT_VERSION" ]]; then
	die "chroot '%s' is not at version %s. Please rebuild." "$copydir" "$CHROOT_VERSION"
fi

if arm-nspawn "$copydir" \
      --bind="${PWD//:/\\:}:/startdir" \
      --bind="${SRCDEST//:/\\:}:/srcdest" \
      "${bindmounts_ro[@]}" "${bindmounts_rw[@]}" \
      /chrootbuild "${makepkg_args[@]}"
then
    mapfile -t pkgnames < <(sudo -u "$makepkg_user" bash -c 'source PKGBUILD; printf "%s\n" "${pkgname[@]}"')
	move_products
else
	(( ret += 1 ))
fi

(( temp_chroot )) && delete_chroot "$copydir" "$copy"

if (( ret != 0 )); then
	if (( temp_chroot )); then
		die "Build failed"
	else
		die "Build failed, check %s/build" "$copydir"
	fi
else
	if (( run_checkpkg )); then
	    msg "Running checkpkg"
	    mapfile -t remotepkgs < <(pacman --config "$copydir"/etc/pacman.conf \
		    	--dbpath "$copydir"/var/lib/pacman \
			    -Sddp "${pkgnames[@]}")
    	if ! wait $!; then
			warning "Skipped checkpkg due to missing repo packages"
			exit 0
		fi

		# download package files if any non-local location exists
		for remotepkg in "${remotepkgs[@]}"; do
		    if [[ $remotepkg != file://* ]]; then
				msg2 "Downloading current versions"
                arm-nspawn "$copydir" pacman --noconfirm -Swdd "${pkgnames[@]}"
				mapfile -t remotepkgs < <(pacman --config "$copydir"/etc/pacman.conf \
					--dbpath "$copydir"/var/lib/pacman \
					-Sddp "${pkgnames[@]}")
				break
			fi
		done

		msg2 "Checking packages"
		sudo -u "$makepkg_user" checkpkg --rmdir --warn "${remotepkgs[@]/#file:\/\//}"
	fi
	true
fi
